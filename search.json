[{"path":"https://david6marsh.github.io/himach/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 EUROCONTROL Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to Supersonic Routing","text":"vignette provides end--end example using himach package find quickest route supersonic (“high Mach”) aircraft allowed fly supersonic sea, subsonic land.","code":"#the libraries needed for the vignette are library(himach) library(dplyr, quietly = TRUE, warn.conflicts = FALSE) library(ggplot2) library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE library(s2) library(rnaturalearthdata)"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes.html","id":"aircraft","dir":"Articles","previous_headings":"","what":"Aircraft","title":"Introduction to Supersonic Routing","text":"need dataframe defines one aircraft. needs, minimum, following fields: id type: short, longer text identifier aircraft over_sea_M over_land_M: two speeds, given Mach number accel_Mpm: acceleration Mach per minute two arrdep_kph: speed arrival departure airport, given km per hour range_km: range km fields optional, recommended include notes give information. convert kph Mach sort cruise altitudes supersonic aircraft use, use fixed value mach_kph=1062. cruise speeds sea land clearly intended supersonic subsonic, respectively. required. might want subsonic, include comparator, subsonic aircraft. might want supersonic, explore routes -called “mach cut-” conditions prevail. himach doesn’t require either speed within particular range values. Run minimum dataset make_aircraft get additional fields needed. Alternatively, run make_aircraft parameters, creates set test aircraft. test set based public data 3 aircraft (though accel_Mpm, arrdep_kph educated guesses), fantasy 4th one, designed testing purposes might pleasant fly . make_aircraft adds fields, converting Mach kph, calculating time transition two speeds. ‘transition penalty’ trans_h hours, used routing search time penalty whenever transition subsonic supersonic (vice versa) needed; typically switching flying land flying sea (vice versa).","code":"# example for your own data - see above for column headings # aircraft <- read.csv(\"data/aircraft.csv\", stringAsFactors = FALSE) # aircraft <- make_aircraft(aircraft) # strongly recommended to record the source file name for later reference # this works even better if your source file has a date embedded in the name # attr(aircraft, \"aircraftSet\") <- \"aircraft.csv\"  # example if you have no data of your own - know that this will use default, so turn off warning aircraft <- make_aircraft(warn = FALSE)"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes.html","id":"airports","dir":"Articles","previous_headings":"","what":"Airports","title":"Introduction to Supersonic Routing","text":"Similarly, need dataset describing airports. needs, minimum, following fields: APICAO: 4-character ICAO code airport long lat: longitude latitude, decimal degrees (E N positive) fields optional, might find useful include longer airport name ap_name give information, well fields containing geographical details, country. aircraft, can load data set run make_airports add geo-coded field . don’t list, make_airports use dataset airportr package. vignette, use restricted set: just New Zealand. geocode airports using built-coordinate reference system (CRS) crs_Pacific; maps . fact need two airport sets, need say flights can stop refuel. aircraft make journey single leg, due lack range, himach automatically searches best refuelling option. can easily multiply number searches 5 10, choose limited number likely ‘good’ options: islands, coastal points, narrow segments land aircraft slow anyway. theoretical example, test aircraft artificially-reduced range, make just one refuel point available: coastal central time, Wellington. refuelling dataset needs format full airports set. easiest filter airports set, inner join refuelling list dataset read file. vignette, ’ll assume Wellington long enough runway. fact himach currently check whether runway long enough aircraft selected.","code":"# example for your own data # airports <- read.csv(\"data/airports.csv\", stringAsFactors = FALSE) # airports <- make_airports(airports)  # example if you have no data of your own airports <- make_airports(crs = crs_Pacific) %>%    filter(substr(APICAO, 1, 1)==\"N\") #just New Zealand, and neighbours #> Using default airport data: airportr::airport. refuel_ap <- airports %>%    filter(APICAO==\"NZWN\")"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes.html","id":"maps","dir":"Articles","previous_headings":"","what":"Maps","title":"Introduction to Supersonic Routing","text":"Next need set shapefiles covering area interest (usually worldwide). need distinguish land sea, starting country level can useful, example filter Antarctic, likely see traffic. can save time ignoring airspace South 60S, example. Finer resolution better, small islands can become larger obstacles. -fly coastal buffer, say around 30km wide, applied, even 1km wide island obstacle 61km wide. useful starter maps rnaturalearth (use countries versions), need decide good enough purposes. Two tests: 30km buffer aircraft passing Crete mainland Greece without slowing ? ’re missing island Antikythera, famous ancient, analogue computer. 50km buffer, routes passing supersonically Taiwan Philippines? missing either Y’Ami Xiao-lan Yu, just 98km apart. Licensing intended use may influence maps available . used data Eurostat past (1:1M scale, Eurostat country shape files). purpose rapid testing vignette, use map provided Stats NZ (January 2020) licensed Stats NZ re-use Creative Commons Attribution 4.0 International licence. fact, need two files: one basic outline land, largely used visualisation; second derived , adds 30km buffer around coastline indicate area supersonic flight allowed. different buffer course possible, 30km right expected radius footprint supersonic boom, expertise determine needed. Since shape file large, provide simplified outline NZ_coast also buffer NZ_buffer30 within himach. original projection used Stats NZ. global work, ’s strongly recommended use one following: crs_Atlantic: “Robinson”, mid 20C classic view, Atlantic centre crs_Pacific: Pacific-centred variant crs=sf::st_CRS(\"+proj=robin +lon_0=180 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\"). leave transformation step process emphasise need think projection use.   scale example, resolution map good. global analysis, need two things: detailed map base coastal buffer (eg rnaturalearthhires::countries10); simplified version, otherwise plotting results take long time. version comments chunk uses basic sf functionality simplify buffer. reasons go another vignette, ’s probably better use s2 adding buffer. gives something like following code (none used vignette).","code":"# if you are using your own shp file  # NZ_shp <- sf::read_sf(\"...../territorial-authority-2020-clipped-generalised.shp\") # NZ_coast <- NZ_shp %>% sf::st_simplify(dTolerance = 1000) %>% sf::st_union() # NZ_buffer30 <- NZ_coast %>% sf::st_buffer(30 * 1000) %>% sf::st_union()  # get test datasets NZ_coast <- hm_get_test(\"coast\") NZ_buffer30 <- hm_get_test(\"buffer\")  # The in-built test maps are already in crs_Pacific # All that remains is to illustrate the land and buffer ggplot(NZ_buffer30) +     geom_sf(colour = NA, fill = \"grey75\")  +       geom_sf(data = NZ_coast, fill = \"grey90\", colour = NA)+     theme_minimal() # a quicker way to do all of this is to use map_routes, with no routes # by default map_routes simplifies maps to a coarse 10km step # for this small example we want something finer-grained map_routes(NZ_coast, fat_map = NZ_buffer30, crs = crs_Pacific,            simplify_km = 2) # you really want to use rnaturalearthhires::countries10 # but that's heavy for this vignette map_NZ <- rnaturalearthdata::countries50 %>%    st_as_sf() %>%    filter(name == \"New Zealand\") # use attributes to track where this came from attr(map_NZ, \"source\") <- \"rnaturalearthdata::countries50\" attr(map_NZ, \"Antarctic\") <- FALSE attr(map_NZ, \"simplify_m\") <- NA  # using s2 for buffering NZ_plus30 <- map_NZ %>%    st_as_s2() %>%    s2::s2_buffer_cells(distance = 30000, max_cells = 1000) %>%    st_as_sfc()  # again, use attributes to record the metadata attr(NZ_plus30,\"buffer_m\") <- 30000 attr(NZ_plus30,\"max_cells\") <- 1000  # and then simplify for plotting # just give 1 example here map_NZ_2k <- map_NZ %>%    st_as_s2() %>%    s2::s2_simplify(tolerance = 2000) %>%    st_as_sfc()  attr(map_NZ_2k, \"simplify_m\") <- 2000  # example map, himach::map_routes but without any routes # by default map_routes simplifies maps to a coarse 10km step # for this small example we want something finer-grained map_routes(map_NZ_2k, fat_map = NZ_plus30, crs = crs_Pacific,             simplify_km = 2)"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes.html","id":"create-a-grid","dir":"Articles","previous_headings":"","what":"Create a grid","title":"Introduction to Supersonic Routing","text":"route constructed grid covers entire map. think grid regular network waypoints route segments high, cruise flight level, though himach doesn’t assign flight level . links grid nominal length: 30-40km appears sufficient, though use coarser grid test. ‘nominal’ mean grid constructed strict distance basis, points along particular lines latitude, links vary length. added connections airports. connections nominal target length, say 150km, represent distance covered accelerating cruise speed, decelerating back landing. practice, length varies, depends (horizontal) distance airport grid. can take long time construct global grid. much-reduced example time might 2-3 seconds. wrap system.time call around creation, give idea timing. ’s roughly proportional square 1/target_km, halve grid size, double time. Normally grid large plot helpfully, limited set, can visualised.","code":"target_km <- 150 system.time( p_grid <- make_route_grid(NZ_buffer30, \"NZ lat-long at 150km\",                              target_km = target_km, classify = TRUE,                          lat_min = -49, lat_max = -32,                           long_min = 162, long_max = 182) ) #>  #>    user  system elapsed  #>   0.703   0.024   0.727  # whether this map is useful depends on the target_km v the overall size of the map ggplot(NZ_buffer30) +     geom_sf(colour = NA, fill = \"grey75\")  +       geom_sf(data = NZ_coast, fill = \"grey90\", colour = NA) +   geom_sf(data = p_grid@lattice,           aes(geometry=geometry), colour=\"lightblue\", size = 0.2) +      theme_minimal()"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes.html","id":"routes","dir":"Articles","previous_headings":"","what":"Routes!","title":"Introduction to Supersonic Routing","text":"Finally ’re ready routing aircraft. result little coarse, used coarse grid. himach simplifies sections route great circles can, points two great-circle segments join vertices grid. can experiment using built-NZ_grid instead. 30km resolution, built NZ_buffer map, nothing else needs change. can control amount reporting creation routes himach.verbosity option, cumulatively get: 0) nothing, 1) route & legs, 2) major stages (envelope, phases, shortcuts) 3) use cache, route stages & timings. fact, normally ’ll want run selection routes one batch. find_route takes one aircraft one airport-pair, wrapper takes list aircraft ids (first column aircraft data), 2-column matrix dataframe 4-letter ICAO codes. creates combinations , runs find_route . wrapper function called find_routes. progress bar, though interacts progress messaging remaining time estimate tends high calculation speeds cache fills . routes, probably want () summary routes created (b) map. functions .  Maps created ggplot2 last map generated can saved ggsave usual way.","code":"options(\"himach.verbosity\" = 4) #for some output # from Auckland to Christchurch ap2 <- make_AP2(\"NZAA\",\"NZCH\",airports)  # normally you do NOT want to do this, but for the vignette we # work with an empty cache hm_clean_cache()  routes <- find_route(aircraft[4,],                       ap2,                      fat_map = NZ_buffer30,                       route_grid = p_grid,                       ap_loc = airports) #> Route:-NZAA<>NZCH---- #>   Not cached: calculating... #> Leg: NZAA<>NZCH Aircraft: Test-only SST #>   Starting envelope: 0 #>  Cut envelope from lattice: 0.1 #>   TOC/TOD not cached: calculating... #>   TOC/TOD not cached: calculating... #>   Got costed lattice: 0.2 #>   Got path: 0.2 #>  Calculated phase changes #>   Ready to recurse #>   transition 1.  2 #>   sea 2.  2 #>   transition 3.  4 #>  Done recursion #>  Checking Shortcuts options(\"himach.verbosity\" = 2) # anything more than 1 is messy, because of the progress bar ap2 <- matrix(c(\"NZAA\",\"NZCH\",\"NZAA\",\"NZDN\",\"NZGS\",\"NZCH\"),                ncol = 2, byrow = TRUE) ac <- aircraft[c(1,4), ]$id  routes <- find_routes(ac, ap2, aircraft, airports,                       fat_map = NZ_buffer30,                       route_grid = p_grid,                      refuel = refuel_ap) #> Route:-NZAA<>NZCH---- #> Leg: NZAA<>NZCH Aircraft: SST M2.2 #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #>  #> Route:-NZAA<>NZDN---- #> Leg: NZAA<>NZDN Aircraft: SST M2.2 #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #>  #> Route:-NZCH<>NZGS---- #> Leg: NZCH<>NZGS Aircraft: SST M2.2 #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #>  #> Route:-NZAA<>NZCH---- #>  #> Route:-NZAA<>NZDN---- #>  Too far for one leg. #> Leg: NZAA<>NZWN Aircraft: Test-only SST #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #> Leg: NZDN<>NZWN Aircraft: Test-only SST #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #>  #> Route:-NZCH<>NZGS---- #> Leg: NZCH<>NZGS Aircraft: Test-only SST #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #> # create route summary rtes <- summarise_routes(routes, airports)  # draw a basic map map_routes(NZ_coast, routes, crs = crs_Pacific, fat_map =  NZ_buffer30, simplify_km = 2)"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes_in_depth.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced Supersonic Routing","text":"Supersonic Routes provides quick end--end introduction using himach package place start. vignette provides advice advanced use, explaining details introduction skates . Much vignette optional occasional use, advice saving reading cache likely essential speedy workflow, described first.","code":"#the libraries needed for the vignette are library(himach) library(dplyr, quietly = TRUE, warn.conflicts = FALSE) library(ggplot2) library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE  # and we'll load a full set of test data NZ_coast <- hm_get_test(\"coast\") NZ_buffer30 <- hm_get_test(\"buffer\") NZ_Buller_buffer40 <- hm_get_test(\"nofly\") NZ_grid <- hm_get_test(\"grid\") NZ_routes <- hm_get_test(\"route\")"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes_in_depth.html","id":"cache","dir":"Articles","previous_headings":"","what":"Cache Management","title":"Advanced Supersonic Routing","text":"himach uses caching speed things . Legs cached route_cache arrival-departure links airports cached star_cache (STAR short standard arrival route, counterpart SID standard instrument departure). want save load cache (meaning combination route_cache star_cache) part standard workflow. Quite save , set routes sensitive () route grid calculated (b) list aircraft used, performance. saving function hm_save_cache forces refer two datasets, uses metadata file name cache. change either , can use hm_clean_cache() empty cache. also note run find_routes map changed, findToCToD map aircraft changed, cache cleared automatically. vignette, save temporary directory. really don’t want practice ;-) cache just works invisibly background - notice speeds finding routes end: example, 1.5s (user) 0.04s (user) machine. particular, helps refuelling, route_cache quickly remembers routes major hub airports main refuelling points, don’t need calculated . Incidentally, add new refuelling point, cache remains valid legs cached, routes. new refuelling point, find_route check old legs new (new refuelling points), gaining legs cached, selecting best combination legs make route.","code":"hm_clean_cache() #start without cache  # need to load some of the built-in data for this example aircraft <- make_aircraft(warn = FALSE) airports <- make_airports(crs = crs_Pacific) #> Using default airport data: airportr::airport.  options(\"himach.verbosity\"= 2) # for a little reporting # how long does it take with an empty cache? system.time(   routes <- find_route(aircraft[1, ],                        make_AP2(\"NZAA\", \"NZDN\", airports),                        fat_map = NZ_buffer30,                        route_grid = NZ_grid,                        ap_loc = airports) ) #> Route:-NZAA<>NZDN---- #> Leg: NZAA<>NZDN Aircraft: SST M2.2 #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #>    user  system elapsed  #>   0.923   0.037   0.960  # test saving of cache to a disposable directory tmp_dir <- tempdir() # for convenience, hm_save_cache gives the full name, including path full_filename <- hm_save_cache(\"test_v\", NZ_grid, aircraft, path = tmp_dir)  #empty cache - just to demonstrate the re-loading # this isn't part of your normal workflow! hm_clean_cache()  # but normally a session will begin with loading a cache like this hm_load_cache(full_filename)  # how long does it take with a cache? system.time(   routes <- find_route(aircraft[1, ],                        make_AP2(\"NZAA\", \"NZDN\", airports),                        fat_map = NZ_buffer30,                        route_grid = NZ_grid,                        ap_loc = airports) ) #> Route:-NZAA<>NZDN---- #>    user  system elapsed  #>   0.017   0.000   0.017   # if you want to see a map # map_routes(NZ_coast, routes, crs_Pacific, fat_map = NZ_buffer30, simplify_km = 2)"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes_in_depth.html","id":"cache-housekeeping-advanced","dir":"Articles","previous_headings":"Cache Management","what":"Cache housekeeping (advanced)","title":"Advanced Supersonic Routing","text":"may times built large cache, several thousand routes handful aircraft. want make change performance one aircraft, say, either need hm_clean_cache() start everything , bit housekeeping. true airport location needs correcting: ideally delete references just airport. ’re comfortable housekeeping, just let himach run overnight redo whole thing. Housekeeping involves loading cache manually, load. contains two environments route_cache star_cache (segments airports). items cache named strings capture number run parameters, including aircraft ID. identify items deletion, rm . save cache manually save.","code":"# for this example, add a second route to the cache routes <- find_route(aircraft[2, ],                        make_AP2(\"NZAA\", \"NZDN\", airports),                        fat_map = NZ_buffer30,                        route_grid = NZ_grid,                        ap_loc = airports) #> Route:-NZAA<>NZDN---- #> Leg: NZAA<>NZDN Aircraft: SST M1.6 8.8 #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts # save the cache, which has NZAA-NZDN for 2 aircraft now hm_save_cache(\"test_v\", NZ_grid, aircraft, path = tmp_dir)  #now do housekeeping load(full_filename) # filename from the previous chunk ls(route_cache) # show the contents, just for information #> [1] \"M16_9-NZAA-NZDN--TRUE-TRUE-NA-TRUE-100-12\" #> [2] \"M22-NZAA-NZDN--TRUE-TRUE-NA-TRUE-100-12\" # we want to delete instances of aircraft with ID that includes 'M22' z <- ls(route_cache, pattern=\"M22\") |> as.list() length(route_cache) # before deletion #> [1] 2 do.call(rm, z, envir = route_cache) # delete the M22 items length(route_cache) #after deletion, 1 less #> [1] 1 # then repeat for star_cache z <- ls(star_cache, pattern=\"M22\") |> as.list() length(star_cache) #> [1] 4 do.call(rm, z, envir = star_cache) length(star_cache) #> [1] 2 # then save the result (you might want to change the filename, or backup the old cache beforehand) save(\"route_cache\", \"star_cache\", file = full_filename)"},{"path":[]},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes_in_depth.html","id":"route_density","dir":"Articles","previous_headings":"Extra Plots","what":"Route density plots","title":"Advanced Supersonic Routing","text":"function map_routes reasonable job showing supersonic aircraft fly, two notable limitations. Firstly, scores hundreds routes, overlapping routes begins reduce readability map. Secondly, routes likely flown often others: Paris-New York day, perhaps, Copenhagen-New York twice per week. vignette, show plot density routes, taking account overlap flight frequency. density map might serve needs, simpler bar chart fairly clear way summarise total quantity (flown hours) , say, latitude, can interest atmospheric modelling. process fairly mechanical. ’ll either latitude longitude bar chart, using single function. assume ’ve calculated set routes, one ‘best’ route per acID routeID (got rid different refuelling options, example). frequency ‘1’ default. Given label ‘hours per week’, corresponds 1 flight per week. want different frequencies route, need pass dataframe 3 columns: identifiers acID routeID, value flights per week flights_w integer. See parameters drop acID, say. want flight hours per year, say, need switch values name freq_var. ’re running forecast, different routes frequencies different years different scenarios. plot faceted year scen_ord. variables also frequency dataset, faceting factors integer. use scen_ord rather scenario indicate ordered factor, can always plotted ‘low, base, high’ order rather alphabetical. ’ll show example two explain bit detail graph ends showing flight hours.   illustrate strong (mode) peak flight demand around 41 degrees South 174 degrees East. get flight hours per week use time_h property routes data. gives duration, hours, fly great circle arc row data. graphing purposes, split great circle row multiple sub-arcs using reframe, like summarise can end rows started . aim significantly smaller sub-arcs bar bin width (sub-arc just arc). share time_h equally amongst sub-arcs extract start (lat long) coordinate sub-arc. Multiply flight frequency get hours per week sub-arc. geom_bar just adds hours per week sub-arcs (starting) bin. summarised comments function.","code":"hm_latlong_density <- function(rt, # route dataset created earlier                                ll = \"lat\", #lat or long chart?                                # frequency data, either 1 or                                # dataset with at least 5 columns                                freq = 1,                                 # 2 for joining                                join_var = c(\"acID\", \"routeID\"),                                # 1 for value                                freq_var = flights_w,                                freq_lab = \"Hours per week\",                                # and 2 for faceting                                facet_rows = vars(year), #or use NULL                                facet_cols = vars(scen_ord, acID),                                # other plot configuration elements                                bar_deg = 3, # width of bar plotted in degrees                                resolution_deg = 1, # granularity of analysis, keep small                                # ignore when flights are stationary (refuelling)                                drop_zero = TRUE,                                # return a graph, or a set of data                                return_data = FALSE){   # graph of lat or long?   sel_coord <- ifelse(ll |>                          stringr::str_to_upper() |>                          stringr::str_sub(1, 2) == \"LA\",                       2, 1)   coord_label <- ifelse(sel_coord == 2, \"Latitude (deg)\", \"Longitude (deg)\")      rt <- rt |>     ungroup() |> #just in case supplied dataset is grouped     # standard route dataset will have all of these     # each row is a great circle segment     # in particular time_h is the flight time in hours for the segment     select(phase, phaseID, gc, acID, routeID, speed_kph, time_h, crow) |>     mutate(seg = row_number()) # note this is ungrouped   # this is a graph of flight time, so ignore time spent on the ground refuelling   if (drop_zero) rt <- rt |>     filter(speed_kph > 0)      if (is.data.frame(freq)) {     # zoom in on the variables we need     freq <- freq |>       ungroup() |>       select(all_of(join_var), {{freq_var}}, scen_ord, year)          rt <- rt |>       inner_join(freq, by = join_var, relationship = \"many-to-many\")   } else {     rt <- rt |>       mutate(flights_w = 1)     facet_rows <- NULL     facet_cols <- vars(acID)   }      # split the great circle arcs into the graph resolution   rt <- rt |>     # ensure fine resolution     sf::st_segmentize(units::set_units(resolution_deg, degree)) |>     # drop the sf geometry, without dropping the gc column     sf::st_set_geometry(\"crow\") |> # we only kept this to sacrifice it here     sf::st_drop_geometry() |>     group_by(across(!gc)) |> #don't want to lose any var in the reframe     # the reframe is to pull out either lat or long coordinate     reframe(coord = st_coordinates(gc)[ , sel_coord]) |>     group_by(across(any_of(c(\"seg\", \"scen_ord\", \"year\")))) |> # now keep one entry per segment/resolution     # drop the last row if there's more than one, because we want to count line segments really     slice(1:max(1, n()-1)) |>     #round to the graph resolution     mutate(coord = resolution_deg * floor(coord / resolution_deg)) |>     distinct() |>     # time_h is the flight time in hours for the great circle segment     # now shared, after st_segmentize, amongst n() subsegments     mutate(time_h = {{freq_var}} * time_h / n(),            bar_coord = bar_deg * round(coord/bar_deg))      # then use geom_bar to add up the times, across all flights   g <- ggplot(rt, aes(bar_coord,                       fill = phase,                       weight = time_h)) +     geom_bar()  +     facet_grid(rows = facet_rows, cols = facet_cols) +     labs(y = freq_lab, x = coord_label)   # orient appropriately for long or lat   if (sel_coord == 2) g <- g +     coord_flip()      if (return_data) return(rt) else return(g) } # simple case with default 1 flight/week frequency hm_latlong_density(NZ_routes, facet_rows = NULL, facet_cols = vars(acID),                    bar_deg = 0.5, resolution_deg = 0.1) # make up a forecast of frequencies freq_fc <- NZ_routes |>    # get the ac & routes we need the forecast for   select(acID, routeID) |>    st_drop_geometry() |> # convert from sf to tibble   distinct() |>    # add in some forecast years   tidyr::crossing(tibble(year = c(2040L, 2050L))) |>    # add in some scenarios   tidyr::crossing(tibble(scen_ord = ordered(c(\"low\", \"base\", \"high\"),                                              levels = c(\"low\", \"base\", \"high\")))) |>    # and some flights per week (that don't make a lot of sense)   arrange(year, scen_ord) |>    mutate(flights_w = row_number())     hm_latlong_density(NZ_routes, ll = \"long\",                     freq = freq_fc,                    bar_deg = 0.5, resolution_deg = 0.1)"},{"path":[]},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes_in_depth.html","id":"no-fly-zones","dir":"Articles","previous_headings":"Route-finding details","what":"No-fly zones","title":"Advanced Supersonic Routing","text":"unusual parts airspace closed, considered unsafe flying. himach allows regions marked ‘avoid’. feature grid, routes avoid , one exception: arrival departure airport can inside -fly zone, long least one connection point grid outside. might precisely called ‘-overfly’ zones. -fly zone prepared way map land. specific countries avoided, country name geographic data comes handy. One essential item avoid attribute -fly zone. used distinguish sets legs different, , -fly zone. Set attr(your_avoid_map, \"avoid\") <- \"summary avoid map\" () remind used (b) tell himach recalculate legs already calculated value avoid. add avoid area North Korean airspace, say, reality North Atlantic routes affected, currently himach plays safe assumes . example, offence intended citizens Buller District New Zealand; convenient example showing routes forced change airspace unavailable.","code":"# using your own shp file  # NZ_Buller <- sf::read_sf(\"...../territorial-authority-2020-clipped-generalised.shp\") %>%  #     filter(TA2020_V_1 == \"Buller District\") # NZ_Buller_u <- sf::st_union(sf::st_simplify(NZ_Buller, dTolerance = 1000)) # NZ_Buller_buffer50 <- sf::st_union(sf::st_buffer(NZ_Buller_u, 50 * 1000)) # attr(NZ_Buller_buffer50, \"avoid\") <- \"Buller+50km\" # the quicker version, using a built-in no fly zone  # this uses data as in the previous code chunk aircraft <- make_aircraft(warn = FALSE) airports <- make_airports(crs = crs_Pacific) #> Using default airport data: airportr::airport.  # run the same route, but with the avoid region options(\"himach.verbosity\"= 2) #just the progress bar ac <- aircraft[c(1, 4), ]$id routes <- find_routes(ac,                        data.frame(ADEP = \"NZAA\", ADES = \"NZDN\"),                       aircraft, airports,                       fat_map = NZ_buffer30,                        route_grid = NZ_grid,                       cf_subsonic = aircraft[3,],                       avoid = NZ_Buller_buffer40) #> Route:-NZAA<>NZDN---- #> Leg: NZAA<>NZDN Aircraft: SST M2.2 #>  Cut envelope from lattice: 0.1 #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #>  Adding subsonic, without range bounds. #> Leg: NZAA<>NZDN Aircraft: 777-300ER #>  Calculated phase changes #>  Done recursion #>  Checking Shortcuts #>  #> Route:-NZAA<>NZDN---- #>  Too far for one leg. #>  Adding subsonic, without range bounds. #>   #this shows versions of the legs with and without no-fly # ls(route_cache, pattern = \"NZCH\", envir = .hm_cache)  # create route summary rtes <- summarise_routes(routes, airports)  # draw a basic map map_routes(NZ_coast, routes, crs_Pacific, fat_map = NZ_buffer30,           avoid_map = NZ_Buller_buffer40,           simplify_km = 2) map_routes(NZ_coast, routes, show_route = \"aircraft\",            crs = crs_Pacific, fat_map = NZ_buffer30,           avoid_map = NZ_Buller_buffer40,           simplify_km = 2)"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes_in_depth.html","id":"why-do-i-have-na-routes","dir":"Articles","previous_headings":"Route-finding details","what":"Why do I have NA routes?","title":"Advanced Supersonic Routing","text":"call find_routes, output can NA entries columns routes. two reasons : airport pair far single leg aircraft. given list possible refuelling airports refuel = xxx, find entries routeID (eg “EGLL<>KSFO”) different fullRouteID (eg “EGLL<>PANC<>KSFO”) showing good route including refuelling. One airports may unreachable top--climb (=top--descent) points within avoid airspace. received warning message end run find_routes. appear specified route possible.","code":""},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes_in_depth.html","id":"bufferaccuracy","dir":"Articles","previous_headings":"Route-finding details","what":"Too many ocean routes: Buffer widths and projections","title":"Advanced Supersonic Routing","text":"60 70 (North South), approximations used st_buffer function begin show signs exceeding limits. particular, ’re adding 50km coastal buffer, example, separations Canadian islands just 100km. Borden Ellef Ringnes examples. buffer generated st_buffer shows strait open water, closed. can lead -optimistic routings: supersonic . solution use links sf s2 package come recent versions sf package. require use quite high value max_cells parameter s2::s2_buffer_cells. fact, problem finding many apparently -ocean routes broader . main contributor missing islands map. See comments first vignette. example place. maps omit small islands (well, larger ones like Killniq tiny ones like Goodwin Island) mouth Hudson Strait. affects apparent width opening. Given islands, 50km buffer, Strait open next example shows. uses non-CRAN, public package hi-resolution maps, rnaturalearthhires. don’t want load package, just note results shown figure.","code":"gr <- s2::s2_data_countries(c(\"Greenland\", \"Canada\", \"Iceland\")) gr_buffer_s2 <- s2::s2_buffer_cells(gr, distance = 50000, max_cells = 20000) %>%    st_as_sfc() m_s2 <- ggplot(st_transform(gr_buffer_s2, crs_Atlantic)) + geom_sf(fill = \"grey40\") +    geom_sf(data = st_transform(st_as_sfc(gr), crs_Atlantic))  sf_use_s2(FALSE) # to be sure gr_transf <- gr %>%    st_as_sfc() %>%    st_transform(crs_Atlantic) gr_t_buffer <- gr_transf %>%    st_buffer(dist = 50000) m_old <- ggplot(gr_t_buffer) + geom_sf(fill = \"grey40\") + geom_sf(data = gr_transf)  cowplot::plot_grid(m_old, m_s2, labels = c(\"bad\", \"good\"),                    ncol = 1) sf::sf_use_s2(TRUE) hires <- sf::st_as_sf(rnaturalearthhires::countries10) %>%    filter(NAME %in% c(\"Greenland\", \"Canada\", \"Iceland\")) hires_buffer_s2 <- s2::s2_buffer_cells(hires, distance = 50000, max_cells = 20000) %>%    st_as_sfc() m_hires <- ggplot(st_transform(hires_buffer_s2, crs_Atlantic)) +    geom_sf(fill = \"grey40\") +    geom_sf(data = st_transform(hires, crs_Atlantic))  cowplot::plot_grid(m_s2, m_hires, labels = c(\"good\", \"better\"),                    ncol = 1)"},{"path":"https://david6marsh.github.io/himach/articles/Supersonic_Routes_in_depth.html","id":"why-do-i-need-a-coordinate-reference-system","dir":"Articles","previous_headings":"","what":"Why do I need a coordinate reference system?","title":"Advanced Supersonic Routing","text":"number place vignettes, eg making airport dataset, shown use parameter specify coordinate reference system. himach recently transitioned using spherical geometry directly using s2 package, directly sf package. s2 available sf constant need align coordinate reference systems objects combining . Now, theory, geometrical operations use spherical geometry, coordinate reference system needed plot map. point, coordinate reference system saying move spherical coordinates flat projection. Four basic projections supplied crs_Atlantic, crs_Pacific, crs_North crs_South can use map_routes get right map particular set routes. can create others shown vignette. remove remaining references coordinate reference systems route creation later versions himach.","code":""},{"path":"https://david6marsh.github.io/himach/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Marsh. Author, maintainer. Enrico Spinielli. Contributor. EUROCONTROL. Funder, copyright holder.","code":""},{"path":"https://david6marsh.github.io/himach/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marsh D (2025). himach: Find Routes Supersonic Aircraft. R package version 1.0.0, https://github.com/david6marsh/himach.","code":"@Manual{,   title = {himach: Find Routes for Supersonic Aircraft},   author = {David Marsh},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/david6marsh/himach}, }"},{"path":"https://david6marsh.github.io/himach/index.html","id":"himach","dir":"","previous_headings":"","what":"Find Routes for Supersonic Aircraft","title":"Find Routes for Supersonic Aircraft","text":"goal himach (“high Mach”) support modelling analysis market supersonic aircraft generating good routes aircraft can fly supersonic ocean, subsonic land. version himach, ‘good’ usually means fastest, key indicator time advantage flying subsonic aircraft. Three example routes, including refuel stop Anchorage. (Original map: www.naturalearthdata.com) operational tool. Please don’t fly routes, allow wind atmospheric conditions, based simple model aircraft performance.","code":""},{"path":"https://david6marsh.github.io/himach/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Find Routes for Supersonic Aircraft","text":"can install latest CRAN release using: can install current development version himach github : vignette testing, package uses map New Zealand map based Stats NZ’s data licensed Stats NZ re-use Creative Commons Attribution 4.0 International licence. Map shown uses data www.naturalearthdata.com, rnaturalearthdata, rnaturalearthhires packages.","code":"install.packages(\"himach\") install.packages(\"devtools\") devtools::install_github(\"david6marsh/himach\")"},{"path":"https://david6marsh.github.io/himach/index.html","id":"why-himach","dir":"","previous_headings":"","what":"Why himach?","title":"Find Routes for Supersonic Aircraft","text":"second generation supersonic passenger aircraft development (taking Concorde first generation). normally fly supersonic ocean, subsonic land. routes well-approximated great circle. Market study: want estimate demand aircraft, key selling point time savings bring. himach calculates time advantage. Emissions modelling: want model aspects emissions, need know duration length flights (well size market): himach helps , least en route phase. Airspace impact: want see areas airspace might affected, routes himach help, though around airports version. Flying supersonic aircraft: , himach. ’re going need something much precise model aircraft performance, mention information weather, route airspace availability, runways use etc. route himach looks something like , shown green map. great-circle route shown thin light blue, comparison. avoid sonic boom reaches land, added buffer around coast, shown dark grey. Example route Boston & Frankfurt plot speed view thing, see route maximises distance supersonic speeds may maintained. Example route Boston & Frankfurt, time showing speed Compared larger subsonic passenger jets, second generation supersonics expected relatively short range. finding efficient re-fuelling points essential part modelling process. map shows examples (results depend airports make available possible re-fuelling points). Example routes, refuelling points useful features himach include: one-stop calculation hundreds routes, functions plot summarise; summary indicators average speed circuity, help filter routes aircraft likely advantage; time advantage calculated default Mach0.84 subsonic aircraft, subsonic aircraft can routed provide alternative comparisons; option close airspace overflights allowed advised; map plotting using four quick-view coordinate reference systems (Atlantic, Pacific 2 polar views), ability use ‘CRS’ required; plotting route-range envelopes, help understand routing options (didn’t stay ocean ? didn’t refuel ?); looking density flights, factor forecast frequency flights varies route year (see advanced vignette). Example polar view","code":""},{"path":"https://david6marsh.github.io/himach/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Find Routes for Supersonic Aircraft","text":"routes shown specific input data: used test aircraft open source geographic data. See vignettes worked example get data himach. need maps airport data, available R packages, vignette shows. package provides short list aircraft illustration purposes , aircraft data taken Wikipedia -likely date. Add aircraft performance data: vignette shows .","code":""},{"path":"https://david6marsh.github.io/himach/reference/GridLat-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A grid and lattice combination — GridLat-class","title":"A grid and lattice combination — GridLat-class","text":"GridLat keeps together grid points lattice links points. 3 components: * character name, used much anger might help remember gone . * dataframe containing points lattice (vertices), ID, longitude latitude. * dataframe containing edges lattice, joining points.","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_120E.html","id":null,"dir":"Reference","previous_headings":"","what":"Asia-centred coordinate reference system — crs_120E","title":"Asia-centred coordinate reference system — crs_120E","text":"Coordinate reference system (CRS) plotting analysing maps. Centred East Asia (120E).","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_120E.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asia-centred coordinate reference system — crs_120E","text":"","code":"crs_120E"},{"path":"https://david6marsh.github.io/himach/reference/crs_120E.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Asia-centred coordinate reference system — crs_120E","text":"CRS","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_120E.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asia-centred coordinate reference system — crs_120E","text":"\"+proj=robin +lon_0=120 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\"","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/crs_Atlantic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atlantic-centred coordinate reference system — crs_Atlantic","title":"Atlantic-centred coordinate reference system — crs_Atlantic","text":"Coordinate reference system (CRS) plotting analysing maps. Atlantic-centred. Works analysis, recommended N-region (eg New Zealand Fiji), instead use crs_Pacific.","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_Atlantic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atlantic-centred coordinate reference system — crs_Atlantic","text":"","code":"crs_Atlantic"},{"path":"https://david6marsh.github.io/himach/reference/crs_Atlantic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Atlantic-centred coordinate reference system — crs_Atlantic","text":"CRS","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_Atlantic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Atlantic-centred coordinate reference system — crs_Atlantic","text":"crs_Atlantic \"+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\"","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/crs_N.html","id":null,"dir":"Reference","previous_headings":"","what":"Arctic-centred coordinate reference system — crs_N","title":"Arctic-centred coordinate reference system — crs_N","text":"Coordinate reference system (CRS) plotting analysing maps. WGS 84 / Arctic Polar Stereographic. Used analysis, recommended plots.","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_N.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arctic-centred coordinate reference system — crs_N","text":"","code":"crs_N"},{"path":"https://david6marsh.github.io/himach/reference/crs_N.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Arctic-centred coordinate reference system — crs_N","text":"CRS","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_N.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arctic-centred coordinate reference system — crs_N","text":"crs_N EPSG3995","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/crs_Pacific.html","id":null,"dir":"Reference","previous_headings":"","what":"Pacific-centred coordinate reference system — crs_Pacific","title":"Pacific-centred coordinate reference system — crs_Pacific","text":"Coordinate reference system (CRS) plotting analysing maps. Pacific-centred.","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_Pacific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pacific-centred coordinate reference system — crs_Pacific","text":"","code":"crs_Pacific"},{"path":"https://david6marsh.github.io/himach/reference/crs_Pacific.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pacific-centred coordinate reference system — crs_Pacific","text":"CRS","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_Pacific.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pacific-centred coordinate reference system — crs_Pacific","text":"\"+proj=robin +lon_0=180 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\"","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/crs_S.html","id":null,"dir":"Reference","previous_headings":"","what":"Antarctic-centred coordinate reference system — crs_S","title":"Antarctic-centred coordinate reference system — crs_S","text":"Coordinate reference system (CRS) plotting analysing maps. WGS 84 / Antarctic Polar Stereographic. Used analysis, recommended plots.","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_S.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antarctic-centred coordinate reference system — crs_S","text":"","code":"crs_S"},{"path":"https://david6marsh.github.io/himach/reference/crs_S.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Antarctic-centred coordinate reference system — crs_S","text":"CRS","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_S.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Antarctic-centred coordinate reference system — crs_S","text":"crs_N EPSG 3031","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/crs_longlat.html","id":null,"dir":"Reference","previous_headings":"","what":"Lat-long coordinate reference system — crs_longlat","title":"Lat-long coordinate reference system — crs_longlat","text":"Coordinate reference system (CRS) creating maps longitude-latitude coordinates. Used analysis, recommended plots.","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_longlat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lat-long coordinate reference system — crs_longlat","text":"","code":"crs_longlat"},{"path":"https://david6marsh.github.io/himach/reference/crs_longlat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lat-long coordinate reference system — crs_longlat","text":"CRS","code":""},{"path":"https://david6marsh.github.io/himach/reference/crs_longlat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lat-long coordinate reference system — crs_longlat","text":"crs_longlat EPSG4326","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/find_leg.html","id":null,"dir":"Reference","previous_headings":"","what":"Find best non-stop route between 2 airports — find_leg","title":"Find best non-stop route between 2 airports — find_leg","text":"find_leg finds quickest non-stop route ac two airports ap2.","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_leg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find best non-stop route between 2 airports — find_leg","text":"","code":"find_leg(   ac,   ap2,   route_grid,   fat_map,   ap_loc,   avoid = NA,   enforce_range = TRUE,   best_by_time = TRUE,   grace_km = NA,   shortcuts = TRUE,   ad_dist_m = 100 * 1000,   ad_nearest = 12,   max_leg_circuity = 1.4,   ... )"},{"path":"https://david6marsh.github.io/himach/reference/find_leg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find best non-stop route between 2 airports — find_leg","text":"ac, ap2, route_grid, fat_map, ap_loc, avoid See find_route enforce_range TRUE (default) leg constrained aircraft range, otherwise routes excess range can found. best_by_time TRUE (default) quickest route found, else shortest distance. grace_km Default NA. Otherwise, great circle distance within 3pct aircraft range, add grace_kmkm range. shortcuts TRUE (default) path checked great circle shortcuts. ad_dist_m length arrival/departure links, m. (Default 100,000=100km) ad_nearest number arrival/departure links create (Default 12) max_leg_circuity maximum detour great circle distance can flown find quick -sea route. Default 1.4. ... parameters, passed make_route_envelope","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_leg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find best non-stop route between 2 airports — find_leg","text":"Dataframe details leg","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_leg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find best non-stop route between 2 airports — find_leg","text":"function finds quickest non-stop route two airports. 'route' made one two 'legs' (airport airport without intermediate stop). find_route makes one calls find_leg required. assumes routing grid, route_grid, already classified land sea using map fat_map. map used converting grid-based route one great-circle segments. fact find_leg finds 4 versions path: great circle, direct airports grid path, consisting segments routing grid, plus departure     arrival routes airports simplification grid path great circle segments shortcuts defaults TRUE. Without , see near-raw     Dijkstra results, _not_ shortest great circle. Legs automatically saved route_cache retrieved available rather re-calculated. See vignette caching cache management.","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_leg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find best non-stop route between 2 airports — find_leg","text":"","code":"# need to load some of the built-in data (not run) if (FALSE) { # \\dontrun{ aircraft <- make_aircraft(warn = FALSE) airports <- make_airports(crs = crs_Pacific) # get test datasets NZ_buffer30 <- hm_get_test(\"buffer\") NZ_grid <- hm_get_test(\"grid\")  options(\"himach.verbosity\" = 4) #for heavy reporting # from Auckland to Christchurch ap2 <- make_AP2(\"NZAA\",\"NZCH\",airports) routes <- find_leg(aircraft[4,],                     ap2,                     fat_map = NZ_buffer30,                     route_grid = NZ_grid,                     ap_loc = airports) } # }"},{"path":"https://david6marsh.github.io/himach/reference/find_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Find best route between 2 airports — find_route","title":"Find best route between 2 airports — find_route","text":"find_route finds quickest route two airports, refuelling necessary","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find best route between 2 airports — find_route","text":"","code":"find_route(   ac,   ap2,   fat_map,   avoid = NA,   route_grid,   cf_subsonic = NA,   refuel = NA,   refuel_h = 1,   refuel_only_if = TRUE,   refuel_topN = 1,   max_circuity = 2,   ap_loc,   margin_km = 200,   ... )"},{"path":"https://david6marsh.github.io/himach/reference/find_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find best route between 2 airports — find_route","text":"ac One aircraft, make_aircraft ap2 One airport pair, make_AP2 fat_map sf::MULTIPOLYGON map land, including buffer avoid sf::MULTIPOLYGON map areas fly route_grid GridLat routing grid make_route_grid cf_subsonic aircraft use comparator, default NA. (use recommended) refuel Airports available refuelling, dataframe APICAO, long, lat refuel_h Duration refuelling stop, hours refuel_only_if TRUE (default) test refuel options necessary great circle distance far aircraft range refuel_topN Return best N (default 1) refuelling options max_circuity Threshold excluding refuelling stops (default 2.0) ap_loc Airport locations make_airports margin_km Great circle distance airports must less aircraft range minus operating margin (default 200km), give margin arrival departure. ... parameters, passed find_leg thence make_route_envelope.","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find best route between 2 airports — find_route","text":"Dataframe details route","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_route.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find best route between 2 airports — find_route","text":"function finds quickest route two airports. 'route' made one two 'legs' (airport airport without intermediate stop). find_route makes one calls find_leg required. assumes routing grid, route_grid, already classified land sea using map fat_map. map used converting grid-based route one great circles segments.","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_route.html","id":"refuelling","dir":"Reference","previous_headings":"","what":"Refuelling","title":"Find best route between 2 airports — find_route","text":"either necessary, great circle distance greater   aircraft range, refuel_only_if FALSE,   find_route searches list refuelling airports   chooses quickest one (refuel_topN). Circuitous refuelling avoided, tested total distance <   max_circuity * great circle distance. separate limits   placed circuity individual legs find_leg. refuel option found, message displayed. route `NA`   `time_h` returned. refuelling stop costs refuel_h addition time   descend airport climb .","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find best route between 2 airports — find_route","text":"","code":"# need to load some of the built-in data aircraft <- make_aircraft(warn = FALSE) # get test datasets NZ_buffer30 <- hm_get_test(\"buffer\") NZ_grid <- hm_get_test(\"grid\") airports <- make_airports(crs = sf::st_crs(NZ_buffer30)) #> Using default airport data: airportr::airport.  options(\"himach.verbosity\" = 4) #for heavy reporting # from Auckland to Christchurch ap2 <- make_AP2(\"NZAA\",\"NZCH\",airports) # on some CRAN machines even this takes too long, so not run if (FALSE) { # \\dontrun{ routes <- find_route(aircraft[4,],                     ap2,                     fat_map = NZ_buffer30,                     route_grid = NZ_grid,                     ap_loc = airports) } # }"},{"path":"https://david6marsh.github.io/himach/reference/find_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Find best routes between airport-pair & aircraft combinations — find_routes","title":"Find best routes between airport-pair & aircraft combinations — find_routes","text":"find_routes combines aircraft airport-pair list finds best routes , refuelling necessary","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find best routes between airport-pair & aircraft combinations — find_routes","text":"","code":"find_routes(ac_ids, ap2_ids, aircraft, airports, ...)"},{"path":"https://david6marsh.github.io/himach/reference/find_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find best routes between airport-pair & aircraft combinations — find_routes","text":"ac_ids vector aircraft IDs, column 'id' make_aircraft ap2_ids 2-column matrix dataframe airport pair text IDs aircraft Specification aircraft, see make_aircraft airports Airport locations make_airports ... parameters, passed find_route.","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find best routes between airport-pair & aircraft combinations — find_routes","text":"Dataframe details routes","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_routes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find best routes between airport-pair & aircraft combinations — find_routes","text":"function finds wrapper single-case function find_route. takes (text) lists aircraft airport codes, combines , finds routes . 'route' made one two 'legs' (airport airport without intermediate stop). details see find_route","code":""},{"path":"https://david6marsh.github.io/himach/reference/find_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find best routes between airport-pair & aircraft combinations — find_routes","text":"","code":"# need to load some of the built-in data aircraft <- make_aircraft(warn = FALSE) airports <- make_airports(crs = crs_Pacific) #> Using default airport data: airportr::airport. # get test datasets NZ_buffer30 <- hm_get_test(\"buffer\") NZ_grid <- hm_get_test(\"grid\")  options(\"himach.verbosity\" = 4) #for heavy reporting # from Auckland to Christchurch ap2 <- make_AP2(\"NZAA\",\"NZCH\",airports) if (FALSE) { # \\dontrun{ routes <- find_route(aircraft[4,],                     ap2,                     fat_map = NZ_buffer30,                     route_grid = NZ_grid,                     ap_loc = airports) } # }"},{"path":"https://david6marsh.github.io/himach/reference/himach-package.html","id":null,"dir":"Reference","previous_headings":"","what":"himach: Find Routes for Supersonic Aircraft — himach-package","title":"himach: Find Routes for Supersonic Aircraft — himach-package","text":"supersonic aircraft, flying subsonic land, find best route airports. Allow coastal buffer potentially closed regions. Use minimal model aircraft performance: focus time saved versus subsonic flight, rather vertical flight profile. modelling forecasting, planning flight!","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/himach-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"himach: Find Routes for Supersonic Aircraft — himach-package","text":"Maintainer: David Marsh david6marsh@gmail.com contributors: Enrico Spinielli enrico.spinielli@eurocontrol.int [contributor] EUROCONTROL [funder, copyright holder]","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_clean_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean the route and SID-STAR cache. — hm_clean_cache","title":"Clean the route and SID-STAR cache. — hm_clean_cache","text":"Empties cache.","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_clean_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean the route and SID-STAR cache. — hm_clean_cache","text":"","code":"hm_clean_cache(cache = c(\"route\", \"star\"))"},{"path":"https://david6marsh.github.io/himach/reference/hm_clean_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean the route and SID-STAR cache. — hm_clean_cache","text":"cache caches clear. Default c(\"route\", \"star\").","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_clean_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean the route and SID-STAR cache. — hm_clean_cache","text":"TRUE silently","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/hm_clean_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean the route and SID-STAR cache. — hm_clean_cache","text":"","code":"hm_clean_cache(\"route\")  hm_clean_cache()"},{"path":"https://david6marsh.github.io/himach/reference/hm_get_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Get test data — hm_get_test","title":"Get test data — hm_get_test","text":"Access 5 datasets used vignettes testing.","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_get_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get test data — hm_get_test","text":"","code":"hm_get_test(item = c(\"coast\", \"buffer\", \"nofly\", \"grid\", \"route\"))"},{"path":"https://david6marsh.github.io/himach/reference/hm_get_test.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get test data — hm_get_test","text":"https://datafinder.stats.govt.nz/layer/104266-territorial-authority-2020-clipped-generalised/","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_get_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get test data — hm_get_test","text":"item one \"coast\", \"buffer\", \"nofly\", \"grid\", \"route\". See details.","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_get_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get test data — hm_get_test","text":"See list ","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_get_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get test data — hm_get_test","text":"\"coast\" dataset containing sf::MULTIPOLYGONS New Zealand. Simplified   version Stats NZ data, 1km resolution. \"buffer\" \"coast\" added 30km buffer keep supersonic   flight away coast. \"nofly\" \"buffer\", limited Buller district 40km buffer.   test additional -fly zones. \"grid\" Latitude-longitude-based routing grid around New Zealand 30km target distance, generated make_route_grid, format GridLat \"route\" unlikely supersonic routes around New Zealand using test aircraft given short range slow subsonic cruise get example 'work'. Includes one refuelling stop (!) Wellington. [operational use!] Returns dataframe. normal way access package test data. usual, direct, way fails machines older software (known feature `sf` package). least-ugly workaround.","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_get_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get test data — hm_get_test","text":"","code":"NZ_coast <- hm_get_test(\"coast\")"},{"path":"https://david6marsh.github.io/himach/reference/hm_load_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Load route and SID/STAR cache — hm_load_cache","title":"Load route and SID/STAR cache — hm_load_cache","text":"silently overwrites existing values cache.","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_load_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load route and SID/STAR cache — hm_load_cache","text":"","code":"hm_load_cache(file)"},{"path":"https://david6marsh.github.io/himach/reference/hm_load_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load route and SID/STAR cache — hm_load_cache","text":"file Including path.","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_load_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load route and SID/STAR cache — hm_load_cache","text":"Invisible true","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/hm_load_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load route and SID/STAR cache — hm_load_cache","text":"","code":"# not run # hm_load_cache(file=\"\") #load from this file"},{"path":"https://david6marsh.github.io/himach/reference/hm_save_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Save route and SID/STAR cache to file — hm_save_cache","title":"Save route and SID/STAR cache to file — hm_save_cache","text":"Filename \"route_star_cache_id_XXX.rda\" \"id\" id parameter XXX made name grid (identifies map used) 'aircraftSet' attribute aircraft dataset (identifies source). cache unique combination (must available, needed generate routes).","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_save_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save route and SID/STAR cache to file — hm_save_cache","text":"","code":"hm_save_cache(id, grid, aircraft, path = \"data/\")"},{"path":"https://david6marsh.github.io/himach/reference/hm_save_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save route and SID/STAR cache to file — hm_save_cache","text":"id Identifying text, see . Recommended use version number date. grid route grid dataset. grid@name added filename. aircraft aircraft dataset. attr(aircraft, \"aircraftSet\") added filename. path default \"data/\", file saved.","code":""},{"path":"https://david6marsh.github.io/himach/reference/hm_save_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save route and SID/STAR cache to file — hm_save_cache","text":"Invisible true","code":""},{"path":[]},{"path":"https://david6marsh.github.io/himach/reference/hm_save_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save route and SID/STAR cache to file — hm_save_cache","text":"","code":"# not run # hm_save_cache(\"v2\", grid, ac) #save here"},{"path":"https://david6marsh.github.io/himach/reference/mach_kph.html","id":null,"dir":"Reference","previous_headings":"","what":"Speed of sound, for Mach to km conversion — mach_kph","title":"Speed of sound, for Mach to km conversion — mach_kph","text":"1 Mach approximately 1062kph standard met conditions altitude supersonic flight (approx 50,000 feet).","code":""},{"path":"https://david6marsh.github.io/himach/reference/mach_kph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speed of sound, for Mach to km conversion — mach_kph","text":"","code":"mach_kph"},{"path":"https://david6marsh.github.io/himach/reference/mach_kph.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Speed of sound, for Mach to km conversion — mach_kph","text":"double","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_AP2.html","id":null,"dir":"Reference","previous_headings":"","what":"Make airport-pair dataset — make_AP2","title":"Make airport-pair dataset — make_AP2","text":"make_AP2 creates airport-pair set two sets airports","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_AP2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make airport-pair dataset — make_AP2","text":"","code":"make_AP2(adep, ades, ap = make_airports())"},{"path":"https://david6marsh.github.io/himach/reference/make_AP2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make airport-pair dataset — make_AP2","text":"adep, ades Identical-length lists airport codes ap List locations airports, defaults output make_airports.","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_AP2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make airport-pair dataset — make_AP2","text":"Dataframe additional variables described .","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_AP2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make airport-pair dataset — make_AP2","text":"function takes two lists airports (length), specified 4-letter codes combines , adding fields: from_long, from_lat, to_long, to_lat: airport lat-longs    adep first AP2: name route specific order gcdist_km: great circle distance km AP2 European airports (crudely, starting letter = 'E' 'L') listed first, otherwise alphabetical order. unidirectional TRUE, \">\" separator, otherwise \"<>\". (Unidirectional currently supported) details see introductory vignette.","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_AP2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make airport-pair dataset — make_AP2","text":"","code":"airports <- make_airports() #get a default set of lat-longs #> Using default airport data: airportr::airport. ap2 <- make_AP2(\"NZAA\",\"NZCH\", airports)"},{"path":"https://david6marsh.github.io/himach/reference/make_aircraft.html","id":null,"dir":"Reference","previous_headings":"","what":"Make aircraft data from minimum dataset — make_aircraft","title":"Make aircraft data from minimum dataset — make_aircraft","text":"make_aircraft ensures minimum set variables describing aircraft","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_aircraft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make aircraft data from minimum dataset — make_aircraft","text":"","code":"make_aircraft(ac = NA, sound_kph = himach::mach_kph, warn = TRUE)"},{"path":"https://david6marsh.github.io/himach/reference/make_aircraft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make aircraft data from minimum dataset — make_aircraft","text":"ac Dataframe containing minimum fields, NA (default) sound_kph Speed sound used convert Mach kph, default mach_kph=1062 suitable altitude. warn Warn ac supplied, default set used. Default TRUE.","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_aircraft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make aircraft data from minimum dataset — make_aircraft","text":"Dataframe least 11 variables describing performance one      aircraft","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_aircraft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make aircraft data from minimum dataset — make_aircraft","text":"function provides test set aircraft necessary adds variables minimal set data give information needed. minimal set needs following fields: id, type: short, longer text identifier aircraft over_sea_M, over_land_M: eponymous two speeds, given Mach number accel_Mpm: acceleration Mach per minute two arrdep_kph: speed arrival departure airports, given km per hour range_km: range km attribute set help keep track aircraft data came (whether new cache needed). aircraftSet attribute ac parameter set, set treated 'disposable'. details see help vignette: vignette(\"SupersonicRouting\", package = \"himach\")","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_aircraft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make aircraft data from minimum dataset — make_aircraft","text":"","code":"# do minimal version (we know it will use the default so turn off warning) ac <- make_aircraft(warn = FALSE)  # on-the-fly example ac <- data.frame(id = \"test\", type = \"test aircraft\",                  over_sea_M = 2.0, over_land_M = 0.9, accel_Mpm = 0.2,                  arrdep_kph = 300, range_km = 6000, stringsAsFactors=FALSE) ac <- make_aircraft(ac, warn = FALSE)  if (FALSE) { # \\dontrun{ # example for your own data aircraft <- utils::read.csv(\"data/aircraft.csv\", stringsAsFactors = FALSE) aircraft <- make_aircraft(aircraft) # strongly recommended to record the file name for later reference attr(aircraft, \"aircraftSet\") <- \"aircraft.csv\" } # }"},{"path":"https://david6marsh.github.io/himach/reference/make_airports.html","id":null,"dir":"Reference","previous_headings":"","what":"Make or load airport data — make_airports","title":"Make or load airport data — make_airports","text":"make_airports ensures minimum set variables describing airports","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_airports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make or load airport data — make_airports","text":"","code":"make_airports(ap = NA, crs = crs_longlat, warn = TRUE)"},{"path":"https://david6marsh.github.io/himach/reference/make_airports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make or load airport data — make_airports","text":"ap Dataframe containing minimum fields, NA (default) crs Coordinate reference system coded lat-longs. Default 4326. warn warn default set used (default = TRUE)","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_airports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make or load airport data — make_airports","text":"Dataframe , addition, geocoded lat-long.","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_airports.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make or load airport data — make_airports","text":"function provides test set airports necessary airportr::airports geocodes lat-long dataset provide ap. minimal set needs following fields: APICAO: 4-letter ICAO code airport (though   validity check applied, 'TEST', 'ZZZZ' used, example) lat, long: latitude longitude decimal degrees","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_airports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make or load airport data — make_airports","text":"","code":"# do minimal version airports <- make_airports() #> Using default airport data: airportr::airport.  # on-the-fly example airports <- data.frame(APICAO = \"TEST\", lat = 10, long = 10, stringsAsFactors = FALSE) airports <- make_airports(airports)  if (FALSE) { # \\dontrun{ # example for your own data airports <- utils::read.csv(\"data/airports.csv\", stringsAsFactors = FALSE) airports <- make_airports(airports) } # }"},{"path":"https://david6marsh.github.io/himach/reference/make_route_envelope.html","id":null,"dir":"Reference","previous_headings":"","what":"Make range-constrained envelope between 2 airports — make_route_envelope","title":"Make range-constrained envelope between 2 airports — make_route_envelope","text":"make_route_envelope finds range envelope given route","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_route_envelope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make range-constrained envelope between 2 airports — make_route_envelope","text":"","code":"make_route_envelope(ac, ap2, envelope_points = 200, fuzz = 0.005)"},{"path":"https://david6marsh.github.io/himach/reference/make_route_envelope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make range-constrained envelope between 2 airports — make_route_envelope","text":"ac, ap2 See find_route envelope_points many points used define ellipse? Default 200. fuzz Add little margin range, allow longest range flown, rather cut boundary. (Default 0.005)","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_route_envelope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make range-constrained envelope between 2 airports — make_route_envelope","text":"sf POLYGON ad hoc coordinate reference system.","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_route_envelope.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make range-constrained envelope between 2 airports — make_route_envelope","text":"'route envelope' region within route B must remain. ellipse. differs pure 'range envelope' points aircraft can reach given airport.","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_route_envelope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make range-constrained envelope between 2 airports — make_route_envelope","text":"","code":"# Need aircraft and airport datasets ac <- make_aircraft(warn = FALSE) ap <- make_airports() #> Using default airport data: airportr::airport. z <- make_route_envelope(ac[1,], make_AP2(\"EGLL\",\"KJFK\",ap))"},{"path":"https://david6marsh.github.io/himach/reference/make_route_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Make lat-long grid for route finding — make_route_grid","title":"Make lat-long grid for route finding — make_route_grid","text":"make_route_grid creates, optionally classifies, lat-long route grid","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_route_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make lat-long grid for route finding — make_route_grid","text":"","code":"make_route_grid(   fat_map,   name,   target_km = 800,   lat_min = -60,   lat_max = 86,   long_min = -180,   long_max = 179.95,   classify = FALSE )"},{"path":"https://david6marsh.github.io/himach/reference/make_route_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make lat-long grid for route finding — make_route_grid","text":"fat_map MULTIPOLYGON map defining land regions name String assigned name slot result target_km Target length. Default 800km avoid accidentally starting heavy compute. 30-50km useful. lat_min, lat_max Latitude extent grid long_min, long_max Longitude extend grid. Two allow small grids crossing 180 boundary, function accepts values outside [-180,180), rounds within range. classify Whether classify link. Defaults FALSE avoid accidentally starting heavy compute.","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_route_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make lat-long grid for route finding — make_route_grid","text":"gridLat object containing points lattice.","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_route_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make lat-long grid for route finding — make_route_grid","text":"function creates GridLat object contains set point lat long grid (ie points lines latitude). also joins points lattice. Optionally, required later, classifies link land, sea, transition, reference given map (typically including coastal buffer). definitions land: ends link land sea: ends sea, link intersect land transition: otherwise length links around target_km 50pct longer diagonal links. details see help vignette: vignette(\"Supersonic Routing\", package = \"himach\")","code":""},{"path":"https://david6marsh.github.io/himach/reference/make_route_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make lat-long grid for route finding — make_route_grid","text":"","code":"NZ_buffer <- hm_get_test(\"buffer\") system.time(   p_grid <- make_route_grid(NZ_buffer,\"NZ lat-long at 300km\",                            target_km = 300, classify = TRUE,                            lat_min = -49, lat_max = -32,                            long_min = 162, long_max = 182) ) #> Made the grid:0 #> Making the basic lattice: #>  #> Adding geo & distance to the lattice... #>  #> Added geo & distance to the lattice:0.2 #> Classifying points in the lattice as land. #> Classified as land:0.2 #> Classifying lines in the lattice as land. #> Classified as land:0.2 #> Calculated all phases:0.2 #> Converting points and lattice to data table. #>    user  system elapsed  #>   0.227   0.005   0.232"},{"path":"https://david6marsh.github.io/himach/reference/map_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Map a set of routes — map_routes","title":"Map a set of routes — map_routes","text":"map_routes plots routes, many options","code":""},{"path":"https://david6marsh.github.io/himach/reference/map_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map a set of routes — map_routes","text":"","code":"map_routes(   thin_map,   routes = NA,   crs = himach::crs_Atlantic,   show_route = c(\"speed\", \"aircraft\", \"time\", \"circuity\", \"acceleration\", \"traffic\"),   fat_map = NA,   avoid_map = NA,   ap_loc = NA,   ap_col = \"darkblue\",   ap_size = 0.4,   forecast = NA,   fc_var = NA_character_,   fc_text = NA_character_,   crow = FALSE,   crow_col = \"grey70\",   crow_size = 0.2,   route_envelope = FALSE,   bound = TRUE,   bound_margin_km = 200,   simplify_km = 8,   land_f = \"grey90\",   buffer_f = \"grey60\",   land_c = \"grey85\",   land_s = 0.2,   avoid_f = \"grey80\",   avoid_c = \"grey95\",   avoid_s = 0.3,   l_alpha = 0.8,   l_size = 0.5,   e_alpha = 0.4,   e_size = 0.6,   e_col = \"grey70\",   refuel_airports = ap_loc,   rap_col = \"red\",   rap_size = 0.4,   scale_direction = -1,   title = \"\",   subtitle = \"\",   warn = FALSE,   ... )"},{"path":"https://david6marsh.github.io/himach/reference/map_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map a set of routes — map_routes","text":"thin_map minimum MULTIPOLYGON map, 'thin' without buffer, normal coastline map. routes generated find_route crs Coordinate reference system, default crs_Atlantic. show_route one \"speed\", \"aircraft\", \"time\", \"circuity\", \"accel\", \"traffic\" indicate goes legend. fat_map optional coast + buffer map, default NA. avoid_map optional map -fly zones, default NA. ap_loc Show used origin destination airports set airports make_airports, NA (default). dataset can airports, filtered used routes. ap_col, ap_size Colour size used airport markers (dark blue, 0.4) forecast, fc_var, fc_text Forecast set two strings. See details, default NA. crow, crow_col, crow_size TRUE, show 'crow-flies' direct great circle, colour crow_col thickness crow_size. Default FALSE, \"grey70\", 0.2 route_envelope show route envelope (default FALSE). bound, bound_margin_km bound=TRUE (default) crop bounding box routes, additional bound_margin_km km (default 200) simplify_km Simplify two maps scale plotting (default 10). land_f, buffer_f, avoid_f fill colours thin, fat -fly maps, default grey 90, 70 80, respectively land_c, land_s boundary colour size land areas (countries), default grey 85 0.2, respectively (use NA turn ) avoid_c, avoid_s boundary colour size avoid areas, default grey 95 0.3, respectively l_alpha, l_size line (route) settings alpha (transparency) width, defaults 0.6 0.4. e_col, e_alpha, e_size colour, alpha width range envelope. Default \"grey70\", 0.4, 0.6 refuel_airports Show used refuel airports using locations, nothing NA. (Defaults ap_loc.) rap_col, rap_size Colour size refuel airport markers (red, 0.4) scale_direction Passed scale_colour_viridis, either -1 (default) 1. title, subtitle Passed ggplot. warn TRUE show warnings (defaults loaded) (default FALSE) ... parameters passed scale_colour_viridis_b (_c, _d), breaks = .","code":""},{"path":"https://david6marsh.github.io/himach/reference/map_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map a set of routes — map_routes","text":"ggplot.","code":""},{"path":"https://david6marsh.github.io/himach/reference/map_routes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map a set of routes — map_routes","text":"function plots routes, options additional layers. Multiple routes expected, can coloured time advantage, speed along segment, aircraft type. option show_route \"time\" requires 'advantage_h' added routes set, route summary. done local version, discarded. Running summarise_routes requires airport dataset; .na(ap_loc) available, default set used. can turn warn see happening, default silent. show_route =  \"speed\", \"aircraft\", \"time\", \"circuity\" \"accel\", information already available routes dataset. show_route = \"traffic\" need provide forecast dataset contains least fullRouteID acID fields normal routes dataset, field giving volume forecast fc_var. flights, seats, something else: use fc_text legend title show units fc_var. Combinations fullRouteID acID must unique, probably means must filter forecast year forecast scenario passing map_routes. time compute map may different simplify_km varying 2km 20km, time plot screen, ggsave file, longer compute time. latter time reduced simplifying maps. single, short routes, can probably see difference 2km 10km, choice prefer speed beauty.","code":""},{"path":"https://david6marsh.github.io/himach/reference/map_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map a set of routes — map_routes","text":"","code":"#see introductory vignette"},{"path":"https://david6marsh.github.io/himach/reference/profile_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Profile a set of routes — profile_routes","title":"Profile a set of routes — profile_routes","text":"Profile set routes","code":""},{"path":"https://david6marsh.github.io/himach/reference/profile_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile a set of routes — profile_routes","text":"","code":"profile_routes(   routes,   yvar = c(\"hours\", \"longitude\"),   ap_loc = make_airports(warn = FALSE),   n_max = 2 )"},{"path":"https://david6marsh.github.io/himach/reference/profile_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile a set of routes — profile_routes","text":"routes generated find_route yvar horizontal axis hours longitude ap_loc Airports coordinates, (silent) default make_airports n_max maximum number routes plot (default 2)","code":""},{"path":"https://david6marsh.github.io/himach/reference/profile_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Profile a set of routes — profile_routes","text":"list named list pairs plots, can displayed using eg result[1].","code":""},{"path":"https://david6marsh.github.io/himach/reference/profile_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Profile a set of routes — profile_routes","text":"","code":"# not run --- # plot_list <- profile_routes(routes, n_max = 3) # plot_list # to display them all"},{"path":"https://david6marsh.github.io/himach/reference/st_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Version of st_transform with view window to avoid dateline — st_window","title":"Version of st_transform with view window to avoid dateline — st_window","text":"st_window st_transform first cuts data appropriate view window avoids problems objects wrapping around back globe","code":""},{"path":"https://david6marsh.github.io/himach/reference/st_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version of st_transform with view window to avoid dateline — st_window","text":"","code":"st_window(m, crs = himach::crs_Atlantic, longit_margin = 0.1)"},{"path":"https://david6marsh.github.io/himach/reference/st_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Version of st_transform with view window to avoid dateline — st_window","text":"m map dataframe, ie class sf data.frame, sfc_MULTIPOLYGON crs Destination coordinate reference system, st_tranform longit_margin Amount trimmed 'far side' projection degrees.","code":""},{"path":"https://david6marsh.github.io/himach/reference/st_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Version of st_transform with view window to avoid dateline — st_window","text":"sf dataframe, parameter m","code":""},{"path":"https://david6marsh.github.io/himach/reference/st_window.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Version of st_transform with view window to avoid dateline — st_window","text":"st_wrap_dateline _should_ handle break map projections uses `GDAL` . Given persistent issues installing GDAL, st_window achieves using s2 instead. works 'simple' projection, sense one dateline single line longitude: ie proj4string contains either \"longitude_of_center\", dateline +180; , case assumes \"longitude_of_center\" 0.","code":""},{"path":"https://david6marsh.github.io/himach/reference/st_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Version of st_transform with view window to avoid dateline — st_window","text":"","code":"world <- sf::st_as_sf(rnaturalearthdata::coastline110) w_pacific <- st_window(world, crs_Pacific) ggplot2::ggplot(w_pacific) + ggplot2::geom_sf()   # bad - not run - dateline problem example # ggplot2::ggplot(st_transform(world, crs_Pacific)) + #   ggplot2::geom_sf()"},{"path":"https://david6marsh.github.io/himach/reference/summarise_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise a set of routes — summarise_routes","title":"Summarise a set of routes — summarise_routes","text":"Reduce set routes one-line per route summary","code":""},{"path":"https://david6marsh.github.io/himach/reference/summarise_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise a set of routes — summarise_routes","text":"","code":"summarise_routes(routes, ap_loc, arrdep_h = 0.5)"},{"path":"https://david6marsh.github.io/himach/reference/summarise_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise a set of routes — summarise_routes","text":"routes segment route, produced find_route find_leg ap_loc List airport locations, output make_airports arrdep_h Total time M084 comparator aircraft arrive & depart hours. Default 0.5.","code":""},{"path":"https://david6marsh.github.io/himach/reference/summarise_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise a set of routes — summarise_routes","text":"Dataframe summary route, sorted ascending order advantage_h best route plotted top. fields : timestamp: leg originally generated (may cached) fullRouteID: including refuel stop routeID: origin destination airport, make_AP2 order refuel_ap: code refuelling airport, NA acID, acType: aircraft identifiers taken aircraft set M084_h: flight time Mach 0.84 comparator aircraft (including 2*arrdep_h) gcdist_km: great circle distance origin destination airports sea_time_frac: Fraction time_h time spent sea, hence supersonic speed,     accelerating , decelerating supersonic speed sea_dist_frac: sea_time_frac, fraction dist_km dist_km: total length route, km time_h: total time, hours n_phases: number distinct phases: arr/dep, transition, land, sea, refuel. advantage_h: M084_h - time_h circuity: route distance extension (1 = perfect) dist_km / gcdist_km best: routeID, fullrouteID maximum advantage_h","code":""},{"path":"https://david6marsh.github.io/himach/reference/summarise_routes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise a set of routes — summarise_routes","text":"function takes output find_route summarises one line per (full) route. refuelling, can multiple 'full routes' 'route'. best column indicates best route routeID. results rounded reasonable number significant figures. just approximate model. arrdep_h checked actual reasonable (observed range roughly 0.3-0.5).","code":""},{"path":"https://david6marsh.github.io/himach/reference/summarise_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise a set of routes — summarise_routes","text":"","code":"# here we use a built-in set of routes # see vignette for more details of how to obtain it airports <- make_airports(crs = crs_Pacific) #> Using default airport data: airportr::airport. NZ_routes <- hm_get_test(\"route\") sumy <- summarise_routes(NZ_routes, airports)"},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-100","dir":"Changelog","previous_headings":"","what":"himach 1.0.0","title":"himach 1.0.0","text":"Upgrade major release, himach mature stable quite . Dependency upgrade: replace use ‘quiet’ option. Bug fixes: -dated link vignette, dependency R pipe.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-032","dir":"Changelog","previous_headings":"","what":"himach 0.3.2","title":"himach 0.3.2","text":"CRAN release: 2023-09-20 New graphics: Route density charts, routes combined forecasts. See Advanced Vignette. Bug fixes: package dependencies, package documentation.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-031","dir":"Changelog","previous_headings":"","what":"himach 0.3.1","title":"himach 0.3.1","text":"CRAN release: 2022-12-05 Bug fixes: Prettier cutting background map dateline. Dependency upgrades using edition 3 testthat removing deprecated syntax tidyverse","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-030","dir":"Changelog","previous_headings":"","what":"himach 0.3.0","title":"himach 0.3.0","text":"CRAN release: 2022-06-09 New graphics options: map_routes colour lines flight frequency variable number accelerations supersonic; now can also plot simple speed/distance/time/altitude profile profile_routes. Added section cache housekeeping advanced vignette. Bug fixes: Solved map ‘leakage’ dateline, make_AP2 copes vectors airport pairs correctly now.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-023","dir":"Changelog","previous_headings":"","what":"himach 0.2.3","title":"himach 0.2.3","text":"CRAN release: 2021-12-01 Fixes solaris running old GDAL: switch storing crs_Atlantic etc strings.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-022","dir":"Changelog","previous_headings":"","what":"himach 0.2.2","title":"himach 0.2.2","text":"CRAN release: 2021-11-21 Fixed crash routing short hops (say re-positioning flights). (development) Bug fixes: map leakage solved, summarise_routes now works 3-letter airport codes well 4 (though default still ICAO codes, IATA codes airports). Removed use Travis code coverage.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-021","dir":"Changelog","previous_headings":"","what":"himach 0.2.1","title":"himach 0.2.1","text":"CRAN release: 2021-06-17 Patch tests work ok sf v1.0+.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-020","dir":"Changelog","previous_headings":"","what":"himach 0.2.0","title":"himach 0.2.0","text":"precise estimate time penalty acceleration subsonic supersonic cruise (v.v.). Perhaps 1% difference timings result. Faster map plots, since maps simplified (little) now, default.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-012","dir":"Changelog","previous_headings":"","what":"himach 0.1.2","title":"himach 0.1.2","text":"CRAN release: 2021-04-30 Tweak test CRAN. Fixed issue using package functions without loading package.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-011","dir":"Changelog","previous_headings":"","what":"himach 0.1.1","title":"himach 0.1.1","text":"CRAN release: 2021-04-23 Errors involving “NULL: PROJ available?” appear linked ‘older GDAL’ issue sf. implemented work-around various examples vignettes. Use make_aircraft(warn = FALSE) examples & vignettes just eliminate warnings. Still think merits warning normal use, default aircraft unlikely fit purposes beyond testing. bug fix: Mach 0.84 comparison summarise_routes now uses 0.84 instead 0.85.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-010","dir":"Changelog","previous_headings":"","what":"himach 0.1.0","title":"himach 0.1.0","text":"CRAN release: 2021-04-15 First version targeted CRAN release. Fixes number bugs avoid-area functionality.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-002","dir":"Changelog","previous_headings":"","what":"himach 0.0.2","title":"himach 0.0.2","text":"Major overhaul approach smoothing Dijkstra-style route great-circle route, handle 1% cases old approach didn’t work well. speed improvements.","code":""},{"path":"https://david6marsh.github.io/himach/news/index.html","id":"himach-001","dir":"Changelog","previous_headings":"","what":"himach 0.0.1","title":"himach 0.0.1","text":"First version using s2 capabilities sf package. gives robust plotting, number internal speed improvements.","code":""}]
